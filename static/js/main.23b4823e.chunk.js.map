{"version":3,"sources":["components/playButton.js","components/startNewGame.js","components/countryGuesser/countryGuesserStats.js","helpers/utils.js","components/countryGuesser/countryGuesserFailurePage.js","components/basicValidation.js","components/borderingCountries/borderingCountriesFeedback.js","components/borderingCountries/borderingCountriesStats.js","components/borderingCountries/borderingCountriesFailurePage.js","components/borderingCountries/borderingCountriesSuccessPage.js","components/countryForm.js","components/borderingCountries/borderingCountriesClue.js","helpers/countryValidation.js","components/borderingCountries/borderingCountriesGuesser.js","components/countryGuesser/countryGuesserSuccessPage.js","components/countryGuesser/countryGuesserFeedback.js","components/countryGuesser/countryGuesser.js","helpers/countryHelper.js","components/country.js","App.js","index.js"],"names":["PlayButton","props","callback","buttonText","id","Button","variant","size","onClick","StartNewGame","countriesInfo","newGameStartedCallback","useState","newGameStarted","setNewGameStarted","a","CountryGuesserStats","updateStats","updateStatsCallback","numberOfWins","setNumberOfWins","numberOfAttempts","setNumberOfAttempts","numberOfGames","setNumberOfGames","useEffect","localStorage","setItem","JSON","stringify","toFixed","capitalizeText","stringArray","stringArrayAsString","forEach","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","CountryGuesserFailurePage","name","flag","map","guesses","style","color","href","border","src","alt","parse","getItem","length","basicValidation","duplicateGuess","knownCountry","borderingCountriesFeedback","correctGuesses","incorrectGuesses","borderingCountriesCount","incorrectCount","guessesRemainingCount","guessesRemainingText","countriesRemainingCount","countriesRemainingText","BorderingCountriesStats","numberOfCorrectAnswers","setNumberOfCorrectAnswers","numberOfIncorrectAnswers","setNumberOfIncorrectAnswers","BorderingCountriesFailurePage","borderingCountries","missingAnswersArray","filter","countryGuess","includes","toLowerCase","BorderingCountriesSuccessPage","answerOrAnswers","messageText","CountryForm","possibleCountries","value","setValue","handleSubmit","Form","onSubmit","Group","className","onChange","options","placeholder","selected","type","BorderingCountriesClue","clues","checkValidGuess","guessedName","isValidCountry","find","country","borderingCountriesGuesser","numberOfBorderingCountriesText","setCorrectGuesses","correctLastGuess","setCorrectLastGuess","setIncorrectGuesses","setIncorrectCount","setGuesses","setDuplicateGuess","failed","setFailed","succeeded","setSucceeded","setKnownCountry","guessedActualCountry","setGuessedActualCountry","setClues","startingLetters","letter","push","findStartingLetterOfBorders","event","preventDefault","target","trim","checkGuessIsCorrect","CountryGuesserSuccessPage","borderingCountriesGameStarted","setBorderingCountriesGameStarted","CountryGuessFeedback","guessedBorderingCountry","CountryGuesser","population","landlocked","region","subregion","capital","correctGuess","setCorrectGuess","setGuessedBorderingCountry","isGuessBorderingCountry","axios","get","response","body","data","countriesArray","countryCodeMapping","extraCountries","common","unMember","independent","countryMappingObj","code","cca3","returnObject","sort","responseBody","console","log","returnBorderingCountries","answerCountries","borderingCountry","allCountriesRequest","Country","countriesResponse","number","selectedCountry","Math","floor","random","borders","maps","googleMaps","toString","flags","png","selectCountry","App","allCountriesResponse","setAllCountriesResponse","foundCountry","setFindCountry","getAllCountriesRequest","then","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23b4823e.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nfunction PlayButton(props) {\n    const callback = props.callback;\n    const buttonText = props.buttonText;\n\n    return (\n        <div id='new-game-button'>\n            <Button variant='primary' size='lg' onClick={callback}>{buttonText}</Button>\n        </div>\n    );\n}\n\nexport default PlayButton;\n","import React, { useState } from 'react';\nimport Country from './country';\nimport PlayButton from './playButton';\n\nfunction StartNewGame(props) {\n    const countriesInfo = props.countriesInfo;\n    const buttonText = props.buttonText;\n    const newGameStartedCallback = props.callback;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n        newGameStartedCallback(true);\n    }\n\n    return (\n        <div id='start-new-game'>\n            {!newGameStarted && <br />}\n            {!newGameStarted && <PlayButton\n                callback={startNewGame}\n                buttonText={buttonText}\n            />}\n            {newGameStarted && <Country\n                countriesInfo={countriesInfo}\n            />}\n        </div>\n    )\n}\n\nexport default StartNewGame;\n","import React, { useState, useEffect } from 'react';\n\nfunction CountryGuesserStats(props) {\n    const updateStats = props.updateStatsCallback;\n\n    const [numberOfWins, setNumberOfWins] = useState(0);\n    const [numberOfAttempts, setNumberOfAttempts] = useState(0);\n    const [numberOfGames, setNumberOfGames] = useState(0);\n\n    const called = true;\n\n    useEffect(() => {\n        const { numberOfWins, numberOfGames, numberOfAttempts } = updateStats();\n        setNumberOfWins(numberOfWins);\n        setNumberOfGames(numberOfGames);\n        setNumberOfAttempts(numberOfAttempts);\n        localStorage.setItem('numberOfWins', JSON.stringify(numberOfWins));\n        localStorage.setItem('numberOfGames', JSON.stringify(numberOfGames));\n        localStorage.setItem('numberOfAttempts', JSON.stringify(numberOfAttempts));\n    }, [called]);\n\n    return (\n        <div id='country-guesser-stats'>\n            {numberOfAttempts > 0 && numberOfGames > 0 && <div>\n                <h1>Stats</h1>\n                <p>Total games: {numberOfGames}</p>\n                <p>Number of wins: {numberOfWins}</p>\n                {numberOfWins > 0 && <p>Win percentage: {((numberOfWins / numberOfGames) * 100).toFixed(1)}%</p>}\n                {numberOfWins > 0 && <p>Number of guesses per correct answer: {(numberOfAttempts / numberOfWins).toFixed(1)}</p>}\n            </div>}\n        </div>\n    );\n}\n\nexport default CountryGuesserStats;\n","export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] = array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        })\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString = index === 0 ? capitalizedString : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n\nexport function numberWithCommas(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport CountryGuesserStats from './countryGuesserStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuesserFailurePage(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const flag = props.flag;\n    const map = props.map;\n    const guesses = props.guesses;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfAttempts')) || 0;\n        const stats = {\n            numberOfWins,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n        };\n        return stats;\n    }\n\n    return (\n        <div id='failure-page'>\n            {!newGameStarted && < div id='country-failure' >\n                <p style={{ color: 'red' }}>You failed. Better luck next time</p>\n                {<p>The answer was <a href={map}>{name}</a></p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n                <img style={{ border: 'solid' }} src={flag} alt='Country Flag' />\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <CountryGuesserStats\n                updateStatsCallback={updateStats}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Try again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default CountryGuesserFailurePage;\n","import React from 'react';\n\nfunction basicValidation(props) {\n    const duplicateGuess = props.duplicateGuess;\n    const knownCountry = props.knownCountry;\n\n    return (\n        <div style={{ color: 'brown' }} id='invalid-guess-feedback'>\n            {duplicateGuess && <p>You've already tried that country!</p>}\n            {!knownCountry && <p>Enter a valid country name</p>}\n        </div>\n    )\n}\n\nexport default basicValidation;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction borderingCountriesFeedback(props) {\n    const correctGuesses = props.correctGuesses;\n    const incorrectGuesses = props.incorrectGuesses;\n    const borderingCountriesCount = props.borderingCountriesCount;\n    const incorrectCount = props.incorrectCount;\n\n    const guessesRemainingCount = 6 - incorrectCount;\n    const guessesRemainingText = incorrectCount >= 5\n        ? `You have ${guessesRemainingCount} life remaining`\n        : `You have ${guessesRemainingCount} lives remaining`;\n\n    const countriesRemainingCount = borderingCountriesCount - correctGuesses.length;\n    const countriesRemainingText = correctGuesses.length === borderingCountriesCount - 1\n        ? `There is ${countriesRemainingCount} bordering country remaining`\n        : `There are ${countriesRemainingCount} bordering countries remaining`;\n\n    return (\n        <div id='bordering-countries-guess-feedback'>\n            {correctGuesses.length > 0 && <p style={{ color: 'green' }}>Correct answers so far: {capitalizeText(correctGuesses)}</p>}\n            {incorrectGuesses.length > 0 && <p style={{ color: 'red' }}>Incorrect answers so far: {capitalizeText(incorrectGuesses)}</p>}\n            <br />\n            <p>{guessesRemainingText}</p>\n            <p>{countriesRemainingText}</p>\n            <br />\n        </div>\n    )\n}\n\nexport default borderingCountriesFeedback;\n","import React, { useState, useEffect } from 'react';\n\nfunction BorderingCountriesStats(props) {\n    const updateStats = props.updateStatsCallback;\n\n    const [numberOfWins, setNumberOfWins] = useState(0);\n    const [numberOfAttempts, setNumberOfAttempts] = useState(0);\n    const [numberOfGames, setNumberOfGames] = useState(0);\n    const [numberOfCorrectAnswers, setNumberOfCorrectAnswers] = useState(0);\n    const [numberOfIncorrectAnswers, setNumberOfIncorrectAnswers] = useState(0);\n    \n    const called = true;\n\n    useEffect(() => {\n        const {\n            numberOfWins, numberOfGames, numberOfAttempts, numberOfCorrectAnswers, numberOfIncorrectAnswers,\n        } = updateStats();\n        setNumberOfWins(numberOfWins);\n        setNumberOfGames(numberOfGames);\n        setNumberOfAttempts(numberOfAttempts);\n        setNumberOfCorrectAnswers(numberOfCorrectAnswers);\n        setNumberOfIncorrectAnswers(numberOfIncorrectAnswers);\n        localStorage.setItem('numberOfBorderWins', JSON.stringify(numberOfWins));\n        localStorage.setItem('numberOfBorderGames', JSON.stringify(numberOfGames));\n        localStorage.setItem('numberOfBorderAttempts', JSON.stringify(numberOfAttempts));\n        localStorage.setItem('numberOfCorrectBorderAnswers', JSON.stringify(numberOfCorrectAnswers));\n        localStorage.setItem('numberOfIncorrectBorderAnswers', JSON.stringify(numberOfIncorrectAnswers));\n    }, [called]);\n\n    return (\n        <div id='country-guesser-stats'>\n            {numberOfGames > 0 && numberOfAttempts > 0 && <div>\n                <h1>Stats</h1>\n                <p>Total games: {numberOfGames}</p>\n                <p>Number of wins: {numberOfWins}</p>\n                {numberOfWins > 0 && <p>Win percentage: {((numberOfWins / numberOfGames) * 100).toFixed(1)}%</p>}\n                {numberOfCorrectAnswers > 0 && <p>Average number of correct answers per game: {(numberOfCorrectAnswers / numberOfGames).toFixed(1)}</p>}\n                {numberOfIncorrectAnswers > 0 && <p>Average number of incorrect answers per game: {(numberOfIncorrectAnswers / numberOfGames).toFixed(1)}</p>}\n            </div>}\n        </div>\n    );\n}\n\nexport default BorderingCountriesStats;\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport BorderingCountriesStats from '../borderingCountries/borderingCountriesStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction BorderingCountriesFailurePage(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const map = props.map;\n    const borderingCountries = props.borderingCountries;\n    const correctGuesses = props.correctGuesses;\n    const guesses = props.guesses;\n\n    const incorrectCount = guesses.length - correctGuesses.length;\n    const borderingCountriesCount = borderingCountries.length;\n    const missingAnswersArray = borderingCountries.filter(countryGuess => !correctGuesses.includes(countryGuess.toLowerCase()));\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfBorderWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfBorderGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfBorderAttempts')) || 0;\n        const numberOfCorrectAnswers = JSON.parse(localStorage.getItem('numberOfCorrectBorderAnswers')) || 0;\n        const numberOfIncorrectAnswers = JSON.parse(localStorage.getItem('numberOfIncorrectBorderAnswers')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            numberOfCorrectAnswers: numberOfCorrectAnswers + correctGuesses.length,\n            numberOfIncorrectAnswers: numberOfIncorrectAnswers + incorrectCount,\n        };\n        return stats;\n    }\n\n    return (\n        <div id='failure-page'>\n            {borderingCountries && !newGameStarted && < div id='bordering-countries-failure' >\n                <p style={{ color: 'red' }}>You failed. Better luck next time</p>\n                <p>See {name} on the <a href={map}>map</a></p>\n                {correctGuesses.length === 0 && <p>You found none of the bordering countries and missed {borderingCountriesCount}</p>}\n                {correctGuesses.length > 0 && <p>You found {correctGuesses.length} of {borderingCountriesCount}</p>}\n                {correctGuesses.length > 0 && <p>You found: {capitalizeText(correctGuesses)}</p>}\n                {missingAnswersArray && <p>You missed: {capitalizeText(missingAnswersArray)}</p>}\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <BorderingCountriesStats\n                updateStatsCallback={updateStats}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Try again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default BorderingCountriesFailurePage;\n","import React, { useState } from 'react';\nimport StartNewGame from '../startNewGame';\nimport BorderingCountriesStats from './borderingCountriesStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction BorderingCountriesSuccessPage(props) {\n    const countriesInfo = props.countriesInfo;\n    const incorrectGuesses = props.incorrectGuesses;\n    const correctGuesses = props.correctGuesses;\n    const name = props.name;\n    const map = props.map;\n    const guesses = props.guesses;\n    const incorrectCount = incorrectGuesses.length;\n    const answerOrAnswers = incorrectCount === 1 ? 'answer' : 'answers';\n\n    const messageText = correctGuesses.length === 1\n        ? `Well done! You found the only bordering country of ${name} with ${incorrectCount} incorrect ${answerOrAnswers}`\n        : `Well done! You found the ${correctGuesses.length} bordering countries of ${name} with ${incorrectCount} incorrect answers`;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfBorderWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfBorderGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfBorderAttempts')) || 0;\n        const numberOfCorrectAnswers = JSON.parse(localStorage.getItem('numberOfCorrectBorderAnswers')) || 0;\n        const numberOfIncorrectAnswers = JSON.parse(localStorage.getItem('numberOfIncorrectBorderAnswers')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins + 1,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n            numberOfCorrectAnswers: numberOfCorrectAnswers + correctGuesses.length,\n            numberOfIncorrectAnswers: numberOfIncorrectAnswers + incorrectCount,\n        };\n        return stats;\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-bordering-countries-game' >\n                <h5 style={{ color: 'green' }}>{messageText}</h5>\n                <p>See <a href={map}>{name}</a> on the map</p>\n                {<p>Your answer history was: {capitalizeText(guesses)}</p>}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <BorderingCountriesStats\n                updateStatsCallback={updateStats}\n            />}\n            <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Play again'\n                callback={setNewGameStarted}\n            />\n        </div>\n    )\n}\n\nexport default BorderingCountriesSuccessPage;\n","import React, { Fragment } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction CountryForm(props) {\n    const possibleCountries = props.possibleCountries;\n    const value = props.value;\n    const setValue = props.setValue;\n    const handleSubmit = props.handleSubmit;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Fragment>\n                <Form.Group className='mb-3'>\n                    <Typeahead\n                        id='country-search'\n                        onChange={setValue}\n                        options={possibleCountries}\n                        placeholder='Select your country'\n                        selected={value}\n                    />\n                </Form.Group>\n            </Fragment>\n            <Button variant='primary' type='submit'>\n                Guess\n            </Button>\n        </Form>\n    )\n}\n\nexport default CountryForm;\n","import React from 'react';\n\nfunction BorderingCountriesClue(props) {\n    const clues = props.clues;\n\n    return (\n        <div id='country-initial-clue'>\n            {clues && <p>The remaining bordering countries begin with the following letters: {clues}</p>}\n        </div>\n    );\n}\n\nexport default BorderingCountriesClue;\n","function checkValidGuess(guessedName, possibleCountries, guesses) {\n    let isValidCountry = false;\n    let knownCountry = false;\n    let duplicateGuess = false;\n    if (guessedName.length > 0) {\n        possibleCountries.find(country => {\n            if (country.toLowerCase() === guessedName) {\n                knownCountry = true;\n                isValidCountry = true;\n            }\n            if (guesses.includes(guessedName)) {\n                duplicateGuess = true;\n            }\n        });\n    }\n    const returnObj = {\n        isValidCountry,\n        knownCountry,\n        duplicateGuess,\n    }\n    return returnObj;\n}\n\nexport default checkValidGuess;\n","import React, { useState, useEffect } from 'react';\nimport BasicValidation from '../basicValidation';\nimport BorderingCountriesFeedback from './borderingCountriesFeedback';\nimport BorderingCountriesFailurePage from './borderingCountriesFailurePage';\nimport BorderingCountriesSuccessPage from '../borderingCountries/borderingCountriesSuccessPage';\nimport CountryForm from '../countryForm';\nimport BorderingCountriesClue from './borderingCountriesClue';\nimport checkValidGuess from '../../helpers/countryValidation';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction borderingCountriesGuesser(props) {\n    const countriesInfo = props.countriesInfo;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const map = props.map;\n\n    const numberOfBorderingCountriesText = borderingCountries.length > 1\n        ? `There are ${borderingCountries.length} bordering countries to find in total`\n        : 'There is 1 bordering country to find';\n\n    const [correctGuesses, setCorrectGuesses] = useState([]);\n    const [correctLastGuess, setCorrectLastGuess] = useState(false);\n    const [incorrectGuesses, setIncorrectGuesses] = useState([]);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState([]);\n    const [guessedActualCountry, setGuessedActualCountry] = useState(false);\n    const [clues, setClues] = useState();\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue([''])\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        let { isValidCountry, knownCountry, duplicateGuess } = checkValidGuess(guessedName, possibleCountries, guesses);\n        setCorrectLastGuess(false);\n        if (guessedName === name.toLowerCase()) {\n            setGuessedActualCountry(true);\n            isValidCountry = false;\n        } else {\n            setGuessedActualCountry(false);\n        }\n        setKnownCountry(knownCountry);\n        setDuplicateGuess(duplicateGuess);\n        if (isValidCountry && knownCountry && !duplicateGuess) {\n            checkGuessIsCorrect(guessedName);\n        }\n    };\n\n    function checkGuessIsCorrect(guessedName) {\n        const lowerCaseBorderingCountryArray = borderingCountries.map(country => country.toLowerCase());\n        if (lowerCaseBorderingCountryArray.includes(guessedName)) {\n            setCorrectGuesses([...correctGuesses, guessedName]);\n            setCorrectLastGuess(true);\n            if (correctGuesses.length + 1 === borderingCountries.length) {\n                setSucceeded(true);\n            }\n        } else {\n            setIncorrectGuesses([...incorrectGuesses, guessedName]);\n            setIncorrectCount(incorrectCount + 1);\n            setCorrectLastGuess(false);\n        }\n        setGuesses([...guesses, guessedName]);\n    }\n\n    function findStartingLetterOfBorders() {\n        if (incorrectGuesses.length >= 4) {\n            const startingLetters = [];\n            borderingCountries.forEach((country) => {\n                if (!correctGuesses.includes(country.toLowerCase())) {\n                    const letter = country.charAt(0).toUpperCase();\n                    startingLetters.push(letter);\n                }\n            });\n            return capitalizeText(startingLetters);\n        }\n    }\n\n    useEffect(() => {\n        if (incorrectCount >= 6) {\n            setFailed(true);\n        }\n\n        const clues = findStartingLetterOfBorders();\n        setClues(clues);\n    })\n\n    return (\n        <div id='borders'>\n            {!succeeded && !failed && <div>\n                <h2>Bordering Countries</h2>\n                <p>Your country is: {name}</p>\n                <p>{numberOfBorderingCountriesText}</p>\n                <div id='borders-form'>\n                    <CountryForm\n                        possibleCountries={possibleCountries}\n                        value={value}\n                        setValue={setValue}\n                        handleSubmit={handleSubmit}\n                    />\n                </div>\n            </div>}\n            {guesses.length > 0 && !failed && !succeeded && <BorderingCountriesFeedback\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                incorrectCount={incorrectCount}\n                borderingCountriesCount={borderingCountries.length}\n            />}\n            {!succeeded && !correctLastGuess && <div id='invalid-border-guess-feedback'>\n                <BasicValidation\n                    duplicateGuess={duplicateGuess}\n                    knownCountry={knownCountry}\n                />\n                {guessedActualCountry && <p style={{ color: 'brown' }}>That's the actual country! Guess the bordering ones instead</p>}\n            </div>}\n            {!succeeded && !failed && clues && <BorderingCountriesClue\n                clues={clues}\n            />}\n            {failed && !succeeded && <BorderingCountriesFailurePage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                correctGuesses={correctGuesses}\n                borderingCountries={borderingCountries}\n                guesses={guesses}\n            />}\n            {succeeded && <BorderingCountriesSuccessPage\n                countriesInfo={countriesInfo}\n                correctGuesses={correctGuesses}\n                incorrectGuesses={incorrectGuesses}\n                name={name}\n                map={map}\n                guesses={guesses}\n            />}\n        </div>\n    );\n}\n\nexport default borderingCountriesGuesser;\n","import React, { useState } from 'react';\nimport BorderingCountriesGuesser from '../borderingCountries/borderingCountriesGuesser';\nimport PlayButton from '../playButton';\nimport StartNewGame from '../startNewGame';\nimport CountryGuesserStats from '../countryGuesser/countryGuesserStats';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuesserSuccessPage(props) {\n    const countriesInfo = props.countriesInfo;\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const name = props.name;\n    const borderingCountries = props.borderingCountries;\n    const possibleCountries = props.possibleCountries;\n    const flag = props.flag;\n    const map = props.map;\n\n    const [newGameStarted, setNewGameStarted] = useState(false);\n    const [borderingCountriesGameStarted, setBorderingCountriesGameStarted] = useState(false);\n\n    function startBorderingCountriesGame() {\n        setBorderingCountriesGameStarted(true);\n        setNewGameStarted(true);\n    }\n\n    async function startNewGame() {\n        setNewGameStarted(true);\n    }\n\n    function updateStats() {\n        const numberOfWins = JSON.parse(localStorage.getItem('numberOfWins')) || 0;\n        const numberOfGames = JSON.parse(localStorage.getItem('numberOfGames')) || 0;\n        const numberOfAttempts = JSON.parse(localStorage.getItem('numberOfAttempts')) || 0;\n        const stats = {\n            numberOfWins: numberOfWins + 1,\n            numberOfGames: numberOfGames + 1,\n            numberOfAttempts: numberOfAttempts + guesses.length,\n        };\n        return stats;\n    }\n\n    return (\n        <div>\n            {!newGameStarted && < div id='successful-country-game' >\n                {incorrectCount === 0 && <h5 style={{ color: 'green' }}>Amazing! You got <a href={map}>{name}</a> in one!</h5>}\n                {incorrectCount > 0 && <h5 style={{ color: 'green' }}>Well done! It took you {incorrectCount + 1} attempts to get <a href={map}>{name}</a></h5>}\n                {incorrectCount > 0 && <p>Your answer history was: {capitalizeText(guesses)}</p>}\n                {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n            </div >}\n            {!newGameStarted && <br />}\n            {!newGameStarted && <CountryGuesserStats\n                updateStatsCallback={updateStats}\n            />}\n            {!newGameStarted && borderingCountries.length > 0 && <PlayButton\n                callback={startBorderingCountriesGame}\n                buttonText='Guess the bordering countries'\n            />}\n            {!borderingCountriesGameStarted && <StartNewGame\n                countriesInfo={countriesInfo}\n                buttonText='Play again'\n                callback={startNewGame}\n            />}\n            {newGameStarted && borderingCountriesGameStarted && <BorderingCountriesGuesser\n                countriesInfo={countriesInfo}\n                name={name}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n                map={map}\n            />}\n        </div>\n    )\n}\n\nexport default CountryGuesserSuccessPage;\n","import React from 'react';\nimport { capitalizeText } from '../../helpers/utils';\n\nfunction CountryGuessFeedback(props) {\n    const incorrectCount = props.incorrectCount;\n    const guesses = props.guesses;\n    const duplicateGuess = props.duplicateGuess;\n    const guessedBorderingCountry = props.guessedBorderingCountry;\n\n    return (\n        <div id='country-guess-feedback'>\n            {!duplicateGuess && <p style={{ color: 'red' }}>Incorrect! That was attempt number {incorrectCount}/6.</p>}\n            {guessedBorderingCountry && <p>You're getting close!</p>}\n            {<p>Your answers so far: {capitalizeText(guesses)}</p>}\n        </div>\n    )\n}\n\nexport default CountryGuessFeedback;\n","import React, { useState, useEffect } from 'react';\nimport CountryGuesserFailurePage from './countryGuesserFailurePage';\nimport CountryGuesserSuccessPage from './countryGuesserSuccessPage';\nimport BasicValidation from '../basicValidation';\nimport CountryGuessFeedback from './countryGuesserFeedback';\nimport CountryForm from '../countryForm';\nimport checkValidGuess from '../../helpers/countryValidation';\n\nfunction CountryGuesser(props) {\n    const countriesInfo = props.countriesInfo;\n    const country = props.country;\n    const possibleCountries = props.possibleCountries;\n\n    const name = country.name;\n    const population = country.population;\n    const flag = country.flag;\n    const landlocked = country.landlocked;\n    const region = country.region;\n    const subregion = country.subregion;\n    const map = country.map;\n    const capital = country.capital;\n    const borderingCountries = country.borderingCountries;\n    // console.log(name) // TODO delete\n    // console.log(borderingCountries) // TODO delete\n\n    const [correctGuess, setCorrectGuess] = useState(false);\n    const [incorrectCount, setIncorrectCount] = useState(0);\n    const [guesses, setGuesses] = useState([]);\n    const [duplicateGuess, setDuplicateGuess] = useState(false);\n    const [failed, setFailed] = useState(false);\n    const [knownCountry, setKnownCountry] = useState(true);\n    const [value, setValue] = useState(['']);\n    const [guessedBorderingCountry, setGuessedBorderingCountry] = useState(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue(['']);\n        const guessedName = event.target[0].value.toLowerCase().trim();\n        const { isValidCountry, knownCountry, duplicateGuess } = checkValidGuess(guessedName, possibleCountries, guesses);\n        setKnownCountry(knownCountry);\n        setDuplicateGuess(duplicateGuess);\n        if (isValidCountry && knownCountry && !duplicateGuess) {\n            checkGuessIsCorrect(guessedName);\n        }\n    };\n\n    function checkGuessIsCorrect(guessedName) {\n        setKnownCountry(true);\n        setDuplicateGuess(false);\n        if (guessedName === name.toLowerCase()) {\n            setCorrectGuess(true);\n        } else {\n            setIncorrectCount(incorrectCount + 1)\n            setCorrectGuess(false);\n            isGuessBorderingCountry(guessedName);\n        }\n        setGuesses([...guesses, guessedName]);\n    }\n\n    function isGuessBorderingCountry(guessedName) {\n        if (!correctGuess && borderingCountries.find(country => country.toLowerCase() === guessedName)) {\n            setGuessedBorderingCountry(true);\n        } else {\n            setGuessedBorderingCountry(false);\n        }\n    }\n\n    useEffect(() => {\n        if (incorrectCount >= 6) {\n            setFailed(true);\n        }\n    })\n\n    return (\n        <div id='country-guesser' className='component'>\n            {!failed && !correctGuess && <div id='country-info'>\n                <h2>Mystery Country</h2>\n                {<p>Population = {population}</p>}\n                {incorrectCount >= 1 && <p>Region = {region}</p>}\n                {incorrectCount >= 2 && <p>{landlocked}</p>}\n                {incorrectCount >= 3 && <p>Sub region = {subregion}</p>}\n                {incorrectCount >= 4 && <div>\n                    <p>Flag: </p>\n                    {<img style={{ border: 'solid' }} src={flag} alt='Country Flag' />}\n                </div>}\n                {incorrectCount >= 5 && <p>Capital city = {capital}</p>}\n            </div>}\n            <div id='country-form'>\n                {!correctGuess && !failed && <CountryForm\n                    possibleCountries={possibleCountries}\n                    value={value}\n                    setValue={setValue}\n                    handleSubmit={handleSubmit}\n                />}\n            </div>\n            <BasicValidation\n                duplicateGuess={duplicateGuess}\n                knownCountry={knownCountry}\n            />\n            {!correctGuess && guesses.length > 0 && !failed && <CountryGuessFeedback\n                guesses={guesses}\n                incorrectCount={incorrectCount}\n                duplicateGuess={duplicateGuess}\n                guessedBorderingCountry={guessedBorderingCountry}\n            />}\n            {correctGuess && !failed && <CountryGuesserSuccessPage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                flag={flag}\n                incorrectCount={incorrectCount}\n                guesses={guesses}\n                borderingCountries={borderingCountries}\n                possibleCountries={possibleCountries}\n            />}\n            {failed && <CountryGuesserFailurePage\n                countriesInfo={countriesInfo}\n                name={name}\n                map={map}\n                flag={flag}\n                guesses={guesses}\n            />}\n        </div >\n    )\n}\n\nexport default CountryGuesser;\n","import axios from 'axios';\nimport { capitalizeText, numberWithCommas } from './utils';\n\n// https://restcountries.com/\n\nasync function allCountriesRequest() {\n  try {\n    const response = await axios.get(`https://restcountries.com/v3.1/all`);\n    const body = response.data;\n\n    const countriesArray = [];\n    const countryCodeMapping = [];\n    const extraCountries = ['Taiwan', 'Greenland', 'Palestine', 'Kosovo', 'Western Sahara'];\n\n    body.forEach(country => {\n      const name = country.name.common;\n      if ((country.unMember && country.independent) || extraCountries.includes(name)) {\n        countriesArray.push(name);\n        const code = country.cca3;\n        const countryMappingObj = {\n          name,\n          code,\n        };\n        countryCodeMapping.push(countryMappingObj);\n      }\n    });\n\n    const returnObject = {\n      countriesArray: countriesArray.sort(),\n      countryCodeMapping,\n      responseBody: body,\n    }\n    return returnObject;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function selectCountry(countriesArray, countriesResponse, countryCodeMapping) {\n  const selectedCountry = countriesArray[Math.floor(Math.random() * countriesArray.length)];\n  const country = countriesResponse.find(country => country.name.common.toLowerCase() === selectedCountry.toLowerCase());\n  const countryObj = {\n    name: country.name.common,\n    borderingCountries: returnBorderingCountries(country.borders, countryCodeMapping),\n    capital: capitalizeText(country.capital),\n    landlocked: country.landlocked ? 'The country is landlocked' : 'The country has a coastline',\n    map: country.maps.googleMaps,\n    population: numberWithCommas(country.population),\n    flag: country.flags.png,\n    region: country.region,\n    subregion: country.subregion,\n  };\n  return countryObj;\n}\n\n\nfunction returnBorderingCountries(borderingCountries, countryCodeMapping) {\n  const answerCountries = [];\n  if (borderingCountries) {\n    borderingCountries.forEach(borderingCountry => {\n      countryCodeMapping.find(country => {\n        if (country.code === borderingCountry) {\n          answerCountries.push(country.name);\n        }\n      })\n    });\n  }\n  return answerCountries;\n}\n\nexport default allCountriesRequest;\n","import React from 'react';\nimport CountryGuesser from './countryGuesser/countryGuesser';\nimport { selectCountry } from '../helpers/countryHelper';\n\nfunction Country(props) {\n  const countriesInfo = props.countriesInfo;\n\n  const countryCodeMapping = countriesInfo.countryCodeMapping\n  const possibleCountries = countriesInfo.countriesArray;\n  const allCountriesResponseBody = countriesInfo.responseBody;\n  const country = selectCountry(possibleCountries, allCountriesResponseBody, countryCodeMapping);\n\n  return (\n    <div id='country'>\n      {country && <CountryGuesser\n        countriesInfo={countriesInfo}\n        country={country}\n        possibleCountries={possibleCountries}\n      />}\n    </div >\n  );\n}\n\nexport default Country;\n","import React, { useState, useEffect } from 'react';\nimport Country from './components/country';\nimport getAllCountriesRequest from './helpers/countryHelper';\n\nfunction App() {\n  const [allCountriesResponse, setAllCountriesResponse] = useState();\n  const [foundCountry, setFindCountry] = useState(false);\n\n  useEffect(() => {\n    if (!foundCountry) {\n      getAllCountriesRequest()\n        .then(allCountriesResponse => {\n          setFindCountry(true);\n          setAllCountriesResponse(allCountriesResponse);\n        });\n    }\n  });\n\n  return (\n    <div id='app'>\n      <h1>FUN WITH COUNTRIES!</h1>\n      {allCountriesResponse && <Country\n        countriesInfo={allCountriesResponse}\n      />}\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}